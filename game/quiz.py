
import operator
import random

ops = { "+":operator.add, "-":operator.sub, "*":operator.mul, "/":operator.floordiv}

#Question


class Question(object):
    def __init__(self, d, q):
        self.randomList = []
        self.questiontype = q #Question type differs between each inherited classes
        self.difficulty = d #We need to talk about this
        self.question = "" #Randomly Generated Questions
        self.answer = 0 #Answer for randomly generated question
        self.yanswerstr = "" #Question generated by getAnswer function
        self.yanswer = 0 #Answer generated by getAnswer function

    def getAnswer(self): #This will be the function that takes user input and generate the answer and the question string
        pass

    def chkAnswer(self):
        return self.answer == self.youranswer

    def closeness(self):
        return self.youranswer/self.answer

#Arithmetics
#Take Difficulty level(possibly an integer)
#and Question Type, of 'maximize', 'quiz', or 'match'
class Arith(Question):
    def __init__(self, d, q):
        super(Arith, self).__init__(d,1)
        self.randomList = [ random.randrange(100), random.randrange(100), random.randrange(100) ]
        self.randops = random.sample(ops, 2)
        self.question = eval("self." + q + "()")
        self.answer = float(int(eval(self.question) * 100))/100.0

    def quiz(self):
        trandomList = list(self.randomList)
        tops = list(self.randops)
        firstNumber = trandomList[random.randrange(len(trandomList))]
        firstOps = tops[random.randrange(len(tops))]
        trandomList.remove(firstNumber)
        tops.remove(firstOps)
        secondNumber = trandomList[random.randrange(len(trandomList))]
        trandomList.remove(secondNumber)
        return str(firstNumber) + ' ' + firstOps + ' ' + str(secondNumber) + ' ' + tops[0] + ' ' + str(trandomList[0])

    def maximize(self):
        maxlist = {}
        for i in range(len(self.randomList)):
            p = str(self.randomList[i%3]) + ' ' + self.randops[0] + ' ' + str(self.randomList[(i+1)%3]) + ' ' + self.randops[1] + ' ' + str(self.randomList[(i+2)%3])
            maxlist[p] = eval(p)
            p = str(self.randomList[i%3]) + ' ' + self.randops[0] + ' ' + str(self.randomList[(i+2)%3]) + ' ' + self.randops[1] + ' ' + str(self.randomList[(i+1)%3])
            maxlist[p] = eval(p)
            p = str(self.randomList[i%3]) + ' ' + self.randops[1] + ' ' + str(self.randomList[(i+1)%3]) + ' ' + self.randops[0] + ' ' + str(self.randomList[(i+2)%3])
            maxlist[p] = eval(p)
            p = str(self.randomList[i%3]) + ' ' + self.randops[1] + ' ' + str(self.randomList[(i+2)%3]) + ' ' + self.randops[0] + ' ' + str(self.randomList[(i+1)%3])
            maxlist[p] = eval(p)
            
        return max(maxlist.iterkeys(), key=lambda k: maxlist[k])
    
    def match(self):
        pass


#Decimal Arithmetics.
#Takes Difficulty level(possibly an integer)
#and Question Type, of 'maximize', 'quiz', or 'match'
class decArith(Arith):
    def __init__(self, d, q):
        super(decArith, self).__init__(d,q)
        self.randomList = [ float(random.randrange(10000))/100.0, float(random.randrange(10000))/100.0, float(random.randrange(10000))/100.0 ]
        self.answer = float(int(eval(self.question) * 100))/100.0